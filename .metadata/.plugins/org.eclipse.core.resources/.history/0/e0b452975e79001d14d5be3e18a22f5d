package com.owner.service.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.owner.service.exception.RoomNotFoundException;
import com.owner.service.feignclient.RoomFeignClient;
import com.owner.service.model.Room;

@RestController
@RequestMapping("/owner")
public class RoomManagerController {
	@Autowired
	private RoomFeignClient roomClient;
	
	@PostMapping("/addRoomDetails")
	public ResponseEntity<Room> addRoomDetails(@RequestBody Room roomDetails) throws RoomNotFoundException {
		return roomClient.addRoomDetails(roomDetails);
	}
	@PutMapping("/updateRoomDetails")
	public ResponseEntity<Room> updateRoomDetails(@RequestBody Room roomDetails) throws RoomNotFoundException{
		return roomClient.updateRoomDetails(roomDetails);
	}
	@DeleteMapping("/deleteRoomDetails/{id}")
	public ResponseEntity<String> deleteRoomDetails(@PathVariable("id") int id) throws RoomNotFoundException{
		return roomClient.deleteRoomDetails(id);
	}
	@Autowired
	private RoomAuthService roomAuthService;

	@GetMapping("/allroom")
	public ResponseEntity<List<Room>> showAllRoom(@RequestHeader("Authorization") String token) {
		try {
			if (roomAuthService.isSessionValid(token)) {
				return roomFeignClient.showAllRoom();
			}
			throw new ResponseStatusException(HttpStatus.FORBIDDEN, "You are Unauthorized!...");
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.FORBIDDEN, "You are Unauthorized!...");
		}
	}

	@GetMapping("/showroom/{id}")
	public ResponseEntity<Room> showRoomById(@PathVariable("id") int id, @RequestHeader("Authorization") String token)
			throws RoomNotFoundException {
		try {
			if (roomAuthService.isSessionValid(token)) {
				return roomFeignClient.showRoomDetailsById(id);
			}
			throw new ResponseStatusException(HttpStatus.FORBIDDEN, "You are Unauthorized!...");
		} catch (Exception e) {
			throw new ResponseStatusException(HttpStatus.FORBIDDEN, "You are Unauthorized!...");
		}
	}

}
