package com.manager.controller;

import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.manager.exception.InventoryNotFoundException;
import com.manager.feignclient.InventoryFeignClient;
import com.manager.model.Inventory;


@RestController
@RequestMapping("/manager")
public class InventoryManagerController {
	@Autowired
	private InventoryFeignClient inventoryClient;
	
	@Autowired
	private InventoryAuthService inventoryAuthService; 
	
	@GetMapping("/all")
    public ResponseEntity<List<Inventory>> showAllInventory(@RequestHeader("Authorization") String token){
		try {
            if (inventoryAuthService.isSessionValid(token)) {
		
             return inventoryClient.showAllInventory();
            }
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "You are Unauthorized!...");
        } catch (Exception e) {
            throw new ResponseStatusException(HttpStatus.FORBIDDEN, "You are Unauthorized!...");
        }
        }
	
	@PostMapping("/addInventory")
	public ResponseEntity<Inventory> addInventoryDetails(@RequestBody Inventory inventoryDetails) throws InventoryNotFoundException {
		return inventoryClient.addInventoryDetails(inventoryDetails);
	}
	@PutMapping("/updateInventory")
	public ResponseEntity<Inventory> updateInventoryDetails(@RequestBody Inventory inventoryDetails) throws InventoryNotFoundException{
		return inventoryClient.updateInventoryDetails(inventoryDetails);
	}
	@DeleteMapping("/deleteInventory/{id}")
	public ResponseEntity<String> deleteInventoryDetails(@PathVariable("id") int id) throws InventoryNotFoundException{
		return inventoryClient.deleteInventoryDetails(id);
	}

}
